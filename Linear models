{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-09T21:33:48.676338Z","iopub.execute_input":"2024-10-09T21:33:48.677297Z","iopub.status.idle":"2024-10-09T21:33:49.156613Z","shell.execute_reply.started":"2024-10-09T21:33:48.677250Z","shell.execute_reply":"2024-10-09T21:33:49.155331Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## LinearClassifier models\n### Rigde classification\nThe loss function is given by\n $$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\nTo minimize the loss function $L$, we use the gradient method, which is defined as follow\n$$w_{n+1}=w_n+\\lambda \\nabla L(w_n)$$\n\n### Logistic regression\nThe loss function is defined by \n$$L(w)=\\frac{1}{n}\\sum \\left( -y_i\\log (f(w_ix_i))-(1-y_i)\\log (1-f(w_ix_i)) \\right)+ \\text{penalty function} $$\nwhere $f$ is the logistic function, $f(s)=\\frac{1}{1+e^{-s}}.$\n- The penalty function: $l1, l2 \\text{ or Elasticnet} $.\n-  Optimization method: lbfgs, liblinear, newton-cg, newton-cholesky, sag, saga. Default is 'lbfgs'\n\n### SGDClassification\n - We use the SGD (mini-batch) to optimize the loss function.\n -Loss function: hinge (that gives the SVM), log-loss (logistic regression), perceptron.\n -Penalty function: $l_1, l_2$ or elasticnet.\n \n### Support vector machine\nThe problem of finding the optimal margin \n\\begin{align*}\n\\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2\\\\\n\\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq 1\n\\end{align*}\nThe Lagrangian function is given by\n$$L(w,b,\\alpha)=\\frac{1}{2} \\|w\\|^2-\\sum_{i=1}^{m} \\alpha_i\\left[y^{(i)} (wx^{(i)}+b)-1\\right].$$\nBy solving the dual optimizatio problem, we obtain the problem\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &\\alpha_i\\geq 0.\n \\end{align*}\n The product $x^i x^j$ can by generared by any produit scalar $<x^i, x^j>=\\Omega(x^i)\\Omega^T(x^j)$  \n#### Regularization and non-separable\nWe study the loss function in the form following\n \\begin{align*}\n \\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2+C\\sum \\xi_i \\\\\n \\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq (1-\\xi_i)\\\\\n & \\psi_i\\geq 0.\n \\end{align*}\n The dual optimization problem of Lagrange function is given by\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &0\\leq \\alpha_i\\leq C.\n \\end{align*}\n","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, auc, accuracy_score,roc_auc_score, precision_score, roc_curve","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:43:16.541974Z","iopub.execute_input":"2024-10-09T22:43:16.542384Z","iopub.status.idle":"2024-10-09T22:43:16.548372Z","shell.execute_reply.started":"2024-10-09T22:43:16.542355Z","shell.execute_reply":"2024-10-09T22:43:16.547172Z"},"trusted":true},"execution_count":115,"outputs":[]},{"cell_type":"code","source":"train_df=pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_df= pd.read_csv('/kaggle/input/titanic/test.csv')\ntrain_df=train_df.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)\ntest_df=test_df.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:00.268664Z","iopub.execute_input":"2024-10-09T21:34:00.269058Z","iopub.status.idle":"2024-10-09T21:34:00.319012Z","shell.execute_reply.started":"2024-10-09T21:34:00.269029Z","shell.execute_reply":"2024-10-09T21:34:00.317968Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_df['Title']=train_df['Name'].str.extract(r'(\\w+)\\.')\ntest_df['Title']=test_df['Name'].str.extract(r'(\\w+)\\.')\ntrain_df=train_df.drop('Name', axis=1)\ntest_df=test_df.drop('Name', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:05.031667Z","iopub.execute_input":"2024-10-09T21:34:05.032164Z","iopub.status.idle":"2024-10-09T21:34:05.055770Z","shell.execute_reply.started":"2024-10-09T21:34:05.032076Z","shell.execute_reply":"2024-10-09T21:34:05.054622Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_df['Title']=train_df['Title'].replace([ 'Lady','Don', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntrain_df['Title']=train_df['Title'].replace(['Mlle','Ms'], 'Mrs')\ntrain_df['Title']=train_df['Title'].replace('Mme', 'Miss')\ntest_df['Title']=test_df['Title'].replace([ 'Lady','Don','Dona', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntest_df['Title']=test_df['Title'].replace(['Mlle','Ms'], 'Mrs')\ntest_df['Title']=test_df['Title'].replace('Mme', 'Miss')","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:05.691473Z","iopub.execute_input":"2024-10-09T21:34:05.691893Z","iopub.status.idle":"2024-10-09T21:34:05.709376Z","shell.execute_reply.started":"2024-10-09T21:34:05.691861Z","shell.execute_reply":"2024-10-09T21:34:05.708271Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"### Label Encoder","metadata":{}},{"cell_type":"code","source":"LabEnc=LabelEncoder()\nLabEnc.fit(train_df['Sex'])\ntrain_df['Sex']=LabEnc.transform(train_df['Sex'])\ntest_df['Sex']=LabEnc.transform(test_df['Sex'])","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:11.253295Z","iopub.execute_input":"2024-10-09T21:34:11.253842Z","iopub.status.idle":"2024-10-09T21:34:11.263924Z","shell.execute_reply.started":"2024-10-09T21:34:11.253797Z","shell.execute_reply":"2024-10-09T21:34:11.262493Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"LabEnc=LabelEncoder()\nLabEnc.fit(train_df['Embarked'])\ntrain_df['Embarked']=LabEnc.transform(train_df['Embarked'])\ntest_df['Embarked']=LabEnc.transform(test_df['Embarked'])","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:12.215970Z","iopub.execute_input":"2024-10-09T21:34:12.216386Z","iopub.status.idle":"2024-10-09T21:34:12.224298Z","shell.execute_reply.started":"2024-10-09T21:34:12.216353Z","shell.execute_reply":"2024-10-09T21:34:12.223009Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"LabEnc=LabelEncoder()\nLabEnc.fit(train_df['Title'])\ntrain_df['Title']=LabEnc.transform(train_df['Title'])\ntest_df['Title']=LabEnc.transform(test_df['Title'])","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:13.201581Z","iopub.execute_input":"2024-10-09T21:34:13.202387Z","iopub.status.idle":"2024-10-09T21:34:13.213029Z","shell.execute_reply.started":"2024-10-09T21:34:13.202342Z","shell.execute_reply":"2024-10-09T21:34:13.211840Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"### KNN imputer\nUsing k-Nearest Neighbors to complete the missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nImpKnn=KNNImputer(n_neighbors=10)\ntrain_df['Age']=ImpKnn.fit_transform(train_df[['Age']])","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:16.258321Z","iopub.execute_input":"2024-10-09T21:34:16.259050Z","iopub.status.idle":"2024-10-09T21:34:16.451094Z","shell.execute_reply.started":"2024-10-09T21:34:16.259015Z","shell.execute_reply":"2024-10-09T21:34:16.449812Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:34:18.418659Z","iopub.execute_input":"2024-10-09T21:34:18.419085Z","iopub.status.idle":"2024-10-09T21:34:18.442007Z","shell.execute_reply.started":"2024-10-09T21:34:18.419051Z","shell.execute_reply":"2024-10-09T21:34:18.440711Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Survived  891 non-null    int64  \n 1   Pclass    891 non-null    int64  \n 2   Sex       891 non-null    int64  \n 3   Age       891 non-null    float64\n 4   SibSp     891 non-null    int64  \n 5   Parch     891 non-null    int64  \n 6   Fare      891 non-null    float64\n 7   Embarked  891 non-null    int64  \n 8   Title     891 non-null    int64  \ndtypes: float64(2), int64(7)\nmemory usage: 62.8 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"X_df=train_df.drop(['Survived'], axis=1)\ny_df=train_df['Survived']\nX_df=X_df.astype('float32')\ny_df=y_df.astype('float32')","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:18:10.285401Z","iopub.execute_input":"2024-10-09T22:18:10.285892Z","iopub.status.idle":"2024-10-09T22:18:10.294928Z","shell.execute_reply.started":"2024-10-09T22:18:10.285824Z","shell.execute_reply":"2024-10-09T22:18:10.293522Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"### Liner model with Pytorch","metadata":{}},{"cell_type":"code","source":"import torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader, TensorDataset, Dataset","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:39:45.254414Z","iopub.execute_input":"2024-10-09T21:39:45.254865Z","iopub.status.idle":"2024-10-09T21:39:45.261578Z","shell.execute_reply.started":"2024-10-09T21:39:45.254822Z","shell.execute_reply":"2024-10-09T21:39:45.260098Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"#Class Dataset\nclass RgDataset(Dataset):\n    def __init__(self,X_train,y_train):\n        super().__init__()\n        self.X=torch.from_numpy(X_df)\n        self.y=torch.from_numpy(y_df)\n        self.y=self.y.type(torch.Longtensor)\n        self.len=self.X.shape[0]\n    def __len__(self):\n        return len(self.X)\n    def __getitem__(self, idx):\n        return self.X[idx], self.y[idx]","metadata":{"execution":{"iopub.status.busy":"2024-10-09T21:45:39.816443Z","iopub.execute_input":"2024-10-09T21:45:39.816922Z","iopub.status.idle":"2024-10-09T21:45:39.825736Z","shell.execute_reply.started":"2024-10-09T21:45:39.816886Z","shell.execute_reply":"2024-10-09T21:45:39.824265Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"batch=32\nX_tensor=torch.from_numpy(X_df.values).view(-1,8)\ny_tensor=torch.from_numpy(y_df.values)\ntrain_dataset=TensorDataset(X_tensor, y_tensor)\ntrain_loader=DataLoader(train_dataset, batch_size=32)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:20:08.789561Z","iopub.execute_input":"2024-10-09T22:20:08.789993Z","iopub.status.idle":"2024-10-09T22:20:08.797533Z","shell.execute_reply.started":"2024-10-09T22:20:08.789959Z","shell.execute_reply":"2024-10-09T22:20:08.796209Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"class LogisticRegression(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(LogisticRegression, self).__init__()\n        self.linear=nn.Linear(input_size, output_size)\n    def forward(self,x):\n        x=self.linear(x)\n        x=torch.sigmoid(x)\n        return x","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:25:42.147534Z","iopub.execute_input":"2024-10-09T22:25:42.148060Z","iopub.status.idle":"2024-10-09T22:25:42.155394Z","shell.execute_reply.started":"2024-10-09T22:25:42.148006Z","shell.execute_reply":"2024-10-09T22:25:42.154126Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"n_input=8\nn_output=1\nnum_epochs=200\nLoss=[]\nmodel=LogisticRegression(n_input, n_output)\ncriterion=nn.BCELoss()\nopt=torch.optim.SGD(model.parameters(), lr=0.01)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:33:49.021733Z","iopub.execute_input":"2024-10-09T22:33:49.022502Z","iopub.status.idle":"2024-10-09T22:33:49.029566Z","shell.execute_reply.started":"2024-10-09T22:33:49.022444Z","shell.execute_reply":"2024-10-09T22:33:49.028325Z"},"trusted":true},"execution_count":105,"outputs":[]},{"cell_type":"code","source":"for epoch in range(num_epochs):\n    for X,y in train_loader:\n        #initialize gradient\n        opt.zero_grad()\n        #forward\n        y_pred=model(X)\n        #Loss\n        loss=criterion(y_pred, y.view(-1,1))\n        #calculate gradient\n        loss.backward()\n        #update parameters\n        opt.step()\n    Loss.append(loss.item())\n    correct=0\n    if epoch%20==0:\n        print(f'Epoch {epoch}, Loss: {loss.data}') ","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:38:21.493844Z","iopub.execute_input":"2024-10-09T22:38:21.494278Z","iopub.status.idle":"2024-10-09T22:38:26.181663Z","shell.execute_reply.started":"2024-10-09T22:38:21.494247Z","shell.execute_reply":"2024-10-09T22:38:26.180614Z"},"trusted":true},"execution_count":111,"outputs":[{"name":"stdout","text":"Epoch 0, Loss: 0.45269152522087097\nEpoch 20, Loss: 0.45620739459991455\nEpoch 40, Loss: 0.46060580015182495\nEpoch 60, Loss: 0.46603700518608093\nEpoch 80, Loss: 0.4704737365245819\nEpoch 100, Loss: 0.47353416681289673\nEpoch 120, Loss: 0.4724263548851013\nEpoch 140, Loss: 0.4705226421356201\nEpoch 160, Loss: 0.4690649211406708\nEpoch 180, Loss: 0.46742329001426697\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred=model(X_tensor).round()\naccuracy_score(y_df, y_pred.detach().numpy())","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:41:45.681861Z","iopub.execute_input":"2024-10-09T22:41:45.682281Z","iopub.status.idle":"2024-10-09T22:41:45.693086Z","shell.execute_reply.started":"2024-10-09T22:41:45.682252Z","shell.execute_reply":"2024-10-09T22:41:45.691947Z"},"trusted":true},"execution_count":114,"outputs":[{"execution_count":114,"output_type":"execute_result","data":{"text/plain":"0.7901234567901234"},"metadata":{}}]},{"cell_type":"markdown","source":"### Linear models","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler, StandardScaler, Normalizer\nfrom sklearn.pipeline import Pipeline","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:25:26.813005Z","iopub.execute_input":"2024-09-25T09:25:26.813393Z","iopub.status.idle":"2024-09-25T09:25:26.818615Z","shell.execute_reply.started":"2024-09-25T09:25:26.813362Z","shell.execute_reply":"2024-09-25T09:25:26.817367Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"X=train.drop(['Survived'], axis=1)\ny=train['Survived']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:09:44.772824Z","iopub.execute_input":"2024-09-25T09:09:44.773218Z","iopub.status.idle":"2024-09-25T09:09:44.784480Z","shell.execute_reply.started":"2024-09-25T09:09:44.773184Z","shell.execute_reply":"2024-09-25T09:09:44.783158Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"pipe_norm=Pipeline([('norm_scaler', Normalizer()),('log_reg',LogisticRegression())])\npipe_norm.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:35:18.368435Z","iopub.execute_input":"2024-09-25T09:35:18.368846Z","iopub.status.idle":"2024-09-25T09:35:18.394306Z","shell.execute_reply.started":"2024-09-25T09:35:18.368815Z","shell.execute_reply":"2024-09-25T09:35:18.393198Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('norm_scaler', Normalizer()),\n                ('log_reg', LogisticRegression())])","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;norm_scaler&#x27;, Normalizer()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;norm_scaler&#x27;, Normalizer()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Normalizer</label><div class=\"sk-toggleable__content\"><pre>Normalizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Train score: ', pipe_norm.score(X_train, y_train))\nprint('Test score:' ,pipe_norm.score(X_val, y_val))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:36:33.760116Z","iopub.execute_input":"2024-09-25T09:36:33.760634Z","iopub.status.idle":"2024-09-25T09:36:33.777586Z","shell.execute_reply.started":"2024-09-25T09:36:33.760573Z","shell.execute_reply":"2024-09-25T09:36:33.776193Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Train score:  0.6882022471910112\nTest score: 0.7206703910614525\n","output_type":"stream"}]},{"cell_type":"code","source":"pipe_minmax=Pipeline([('mm_scaler', MinMaxScaler()),('log_reg',LogisticRegression())])\npipe_minmax.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:38:21.015008Z","iopub.execute_input":"2024-09-25T09:38:21.015427Z","iopub.status.idle":"2024-09-25T09:38:21.044029Z","shell.execute_reply.started":"2024-09-25T09:38:21.015393Z","shell.execute_reply":"2024-09-25T09:38:21.042791Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('mm_scaler', MinMaxScaler()),\n                ('log_reg', LogisticRegression())])","text/html":"<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;mm_scaler&#x27;, MinMaxScaler()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;mm_scaler&#x27;, MinMaxScaler()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MinMaxScaler</label><div class=\"sk-toggleable__content\"><pre>MinMaxScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Train score: ', pipe_minmax.score(X_train, y_train))\nprint('Test score:' ,pipe_minmax.score(X_val, y_val))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:38:22.277354Z","iopub.execute_input":"2024-09-25T09:38:22.277777Z","iopub.status.idle":"2024-09-25T09:38:22.292556Z","shell.execute_reply.started":"2024-09-25T09:38:22.277743Z","shell.execute_reply":"2024-09-25T09:38:22.291449Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"Train score:  0.8075842696629213\nTest score: 0.7821229050279329\n","output_type":"stream"}]},{"cell_type":"code","source":"pipe=Pipeline([('scaler', StandardScaler()),('log_reg',LogisticRegression())])\npipe.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:38:28.556902Z","iopub.execute_input":"2024-09-25T09:38:28.557313Z","iopub.status.idle":"2024-09-25T09:38:28.580776Z","shell.execute_reply.started":"2024-09-25T09:38:28.557280Z","shell.execute_reply":"2024-09-25T09:38:28.579549Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('scaler', StandardScaler()),\n                ('log_reg', LogisticRegression())])","text/html":"<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                (&#x27;log_reg&#x27;, LogisticRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Train score: ', pipe.score(X_train, y_train))\nprint('Test score:' ,pipe.score(X_val, y_val))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:38:30.273378Z","iopub.execute_input":"2024-09-25T09:38:30.273802Z","iopub.status.idle":"2024-09-25T09:38:30.289670Z","shell.execute_reply.started":"2024-09-25T09:38:30.273768Z","shell.execute_reply":"2024-09-25T09:38:30.288274Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"Train score:  0.8103932584269663\nTest score: 0.7877094972067039\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Models","metadata":{}},{"cell_type":"markdown","source":"### Linear models\nThe linear models set of methods in which the target value is expected to be a linear combination of the features. In mathematical notation, the prediced function is given by \n$$ y_{train}=\\omega_0+\\omega_1 x_1+\\omega_2 x_2+... +\\omega_n x_n $$\nThe loss function is given by\n$$L(w)=LossFunction (X_{train}, y_{train}, w)+\\text{penalty function}.$$\n#### Rigde\nPenalty function is defined by $p(\\omega)=\\|\\omega\\|^2_2$, thus \n$$L(w)=\\frac{1}{m}\\|wX-y\\|^2+\\alpha\\|\\omega\\|^2_2.$$\n#### Lasso\n$p(\\omega)=\\|\\omega\\|_1$, we obtain that\n$$L(w)=\\frac{1}{m}\\|wX-y\\|^2+\\alpha\\|\\omega\\|_1.$$\n#### Elastic\n$p(\\omega)=\\frac{1-\\rho}{2}\\|\\omega\\|^2_2+\\rho \\|\\omega\\|_1$. The loss function is defined by\n$$L(w)=\\frac{1}{m}\\|wX-y\\|^2+\\alpha\\|\\omega\\|^2_2+\\beta \\|\\omega\\|_1.$$\n     ","metadata":{}},{"cell_type":"markdown","source":"### Rigde classification\nThe loss function is given by\n $$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\nTo minimize the loss function $L$, we use the gradient method, which is defined as follow\n$$w_{n+1}=w_n+\\lambda \\nabla L(w_n)$$","metadata":{}},{"cell_type":"code","source":"from sklearn import linear_model\nLnRg=linear_model.RidgeClassifier()\nLnRg.fit(X_df, y_df)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T22:29:46.027587Z","iopub.execute_input":"2024-10-09T22:29:46.028023Z","iopub.status.idle":"2024-10-09T22:29:46.075751Z","shell.execute_reply.started":"2024-10-09T22:29:46.027987Z","shell.execute_reply":"2024-10-09T22:29:46.074573Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"RidgeClassifier()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RidgeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Training set')\nprint('Matrix confusion: ', confusion_matrix(y_train,LnRg.predict(X_train)))\nprint('accuracy score: ', accuracy_score(y_train, LnRg.predict(X_train)))\nprint('Validation set')\nprint(confusion_matrix(y_val, LnRg.predict(X_val)))\nprint('Accuracy score', accuracy_score(y_val, LnRg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-10-09T13:25:41.398982Z","iopub.execute_input":"2024-10-09T13:25:41.399391Z","iopub.status.idle":"2024-10-09T13:25:41.437035Z","shell.execute_reply.started":"2024-10-09T13:25:41.399361Z","shell.execute_reply":"2024-10-09T13:25:41.435726Z"},"trusted":true},"execution_count":112,"outputs":[{"name":"stdout","text":"Training set\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[112], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining set\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMatrix confusion: \u001b[39m\u001b[38;5;124m'\u001b[39m, confusion_matrix(\u001b[43my_train\u001b[49m,LnRg\u001b[38;5;241m.\u001b[39mpredict(X_train)))\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy score: \u001b[39m\u001b[38;5;124m'\u001b[39m, accuracy_score(y_train, LnRg\u001b[38;5;241m.\u001b[39mpredict(X_train)))\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValidation set\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'y_train' is not defined"],"ename":"NameError","evalue":"name 'y_train' is not defined","output_type":"error"}]},{"cell_type":"markdown","source":"### Logistic regression\nThe loss function is defined by \n$$L(w)=\\frac{1}{n}\\sum \\left( -y_i\\log (f(w_ix_i))-(1-y_i)\\log (1-f(w_ix_i)) \\right)+ \\text{penalty function} $$\nwhere $f$ is the logistic function, $f(s)=\\frac{1}{1+e^{-s}}.$\n- The penalty function: $l1, l2 \\text{ or Elasticnet} $.\n-  Optimization method: lbfgs, liblinear, newton-cg, newton-cholesky, sag, saga. Default is 'lbfgs'","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nLogReg=LogisticRegression(max_iter=10000)\nLogReg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:09.847492Z","iopub.execute_input":"2024-09-25T08:52:09.848096Z","iopub.status.idle":"2024-09-25T08:52:09.888123Z","shell.execute_reply.started":"2024-09-25T08:52:09.848047Z","shell.execute_reply":"2024-09-25T08:52:09.886547Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=10000)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, LogReg.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, LogReg.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  LogReg.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, LogReg.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, LogReg.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  LogReg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:09.889765Z","iopub.execute_input":"2024-09-25T08:52:09.890160Z","iopub.status.idle":"2024-09-25T08:52:09.920713Z","shell.execute_reply.started":"2024-09-25T08:52:09.890118Z","shell.execute_reply":"2024-09-25T08:52:09.919538Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[387  54]\n [ 82 189]]\nAccuracy score:  0.8089887640449438\nRoc auc score:  0.7874839972889525\nResultats on the val set:\nCongusion matrix:  [[91 17]\n [17 54]]\nAccuracy score:  0.8100558659217877\nRoc-AUC score:  0.8015779864371413\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### SGDClassification\n - We use the SGD (mini-batch) to optimize the loss function.\n -Loss function: hinge (that gives the SVM), log-loss (logistic regression), perceptron.\n -Penalty function: $l_1, l_2 \\text{ or elasticnet}$\n","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:09.921922Z","iopub.execute_input":"2024-09-25T08:52:09.922267Z","iopub.status.idle":"2024-09-25T08:52:09.928582Z","shell.execute_reply.started":"2024-09-25T08:52:09.922236Z","shell.execute_reply":"2024-09-25T08:52:09.926737Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"SgdClf=SGDClassifier(loss='log_loss', tol=None, max_iter=200000)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:09.930500Z","iopub.execute_input":"2024-09-25T08:52:09.931037Z","iopub.status.idle":"2024-09-25T08:52:09.943137Z","shell.execute_reply.started":"2024-09-25T08:52:09.931001Z","shell.execute_reply":"2024-09-25T08:52:09.942006Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"SgdClf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:09.944538Z","iopub.execute_input":"2024-09-25T08:52:09.944954Z","iopub.status.idle":"2024-09-25T08:52:25.214929Z","shell.execute_reply.started":"2024-09-25T08:52:09.944925Z","shell.execute_reply":"2024-09-25T08:52:25.213736Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"SGDClassifier(loss='log_loss', max_iter=200000, tol=None)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, SgdClf.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, SgdClf.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  SgdClf.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, SgdClf.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, SgdClf.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  SgdClf.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:25.216483Z","iopub.execute_input":"2024-09-25T08:52:25.216862Z","iopub.status.idle":"2024-09-25T08:52:25.244154Z","shell.execute_reply.started":"2024-09-25T08:52:25.216832Z","shell.execute_reply":"2024-09-25T08:52:25.243116Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[396  45]\n [ 91 180]]\nAccuracy score:  0.8089887640449438\nRoc auc score:  0.781082912869945\nResultats on the val set:\nCongusion matrix:  [[94 14]\n [24 47]]\nAccuracy score:  0.7877094972067039\nRoc-AUC score:  0.7661711006781429\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Support vector machine\nThe problem of finding the optimal margin \n\\begin{align*}\n\\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2\\\\\n\\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq 1\n\\end{align*}\nThe Lagrangian function is given by\n$$L(w,b,\\alpha)=\\frac{1}{2} \\|w\\|^2-\\sum_{i=1}^{m} \\alpha_i\\left[y^{(i)} (wx^{(i)}+b)-1\\right].$$\nBy solving the dual optimizatio problem, we obtain the problem\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &\\alpha_i\\geq 0.\n \\end{align*}\n The product $x^i x^j$ can by generared by any produit scalar $<x^i, x^j>=\\Omega(x^i)\\Omega^T(x^j)$  \n#### Regularization and non-separable\nWe study the loss function in the form following\n \\begin{align*}\n \\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2+C\\sum \\xi_i \\\\\n \\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq (1-\\xi_i)\\\\\n & \\psi_i\\geq 0.\n \\end{align*}\n The dual optimization problem of Lagrange function is given by\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &0\\leq \\alpha_i\\leq C.\n \\end{align*}","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nsvc=SVC(kernel='linear', tol=0.00001)\nsvc.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:25.245376Z","iopub.execute_input":"2024-09-25T08:52:25.245712Z","iopub.status.idle":"2024-09-25T08:52:56.587285Z","shell.execute_reply.started":"2024-09-25T08:52:25.245685Z","shell.execute_reply":"2024-09-25T08:52:56.586052Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"SVC(kernel='linear', tol=1e-05)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, tol=1e-05)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, tol=1e-05)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, svc.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, svc.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  svc.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, svc.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, svc.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  svc.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T08:52:56.588671Z","iopub.execute_input":"2024-09-25T08:52:56.589007Z","iopub.status.idle":"2024-09-25T08:52:56.638717Z","shell.execute_reply.started":"2024-09-25T08:52:56.588979Z","shell.execute_reply":"2024-09-25T08:52:56.637568Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[376  65]\n [ 86 185]]\nAccuracy score:  0.7879213483146067\nRoc auc score:  0.7676322681594161\nResultats on the val set:\nCongusion matrix:  [[92 16]\n [23 48]]\nAccuracy score:  0.7821229050279329\nRoc-AUC score:  0.7639540949400104\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}